from flask import Flask, render_template, request, redirect, jsonify, url_for, flashfrom sqlalchemy import create_engine, asc, descfrom sqlalchemy.orm import sessionmakerfrom database_setup import Base, Category, CategoryItem, Userfrom flask import session as login_sessionimport random, stringfrom oauth2client.client import flow_from_clientsecretsfrom oauth2client.client import FlowExchangeErrorimport httplib2import jsonfrom flask import make_responseimport requestsapp = Flask(__name__, static_url_path='/static')CLIENT_ID = json.loads(    open('client_secrets.json', 'r').read())['web']['client_id']APPLICATION_NAME = "Catalog"# Connect to Database and create database sessionengine = create_engine('sqlite:///catalogwithusers.db')Base.metadata.bind = engineDBSession = sessionmaker(bind=engine)session = DBSession()# JSON APIs to view Category Information@app.route('/category/<int:category_id>/categoryItem/JSON')def categoryItemsJSON(category_id):    category = session.query(Category).filter_by(id=category_id).one()    items = session.query(CategoryItem).filter_by(        category_id=category_id).all()    return jsonify(CategoryItems=[i.serialize for i in items])@app.route('/category/<int:category_id>/categoryItem/<int:item_id>/JSON')def itemJSON(category_id, item_id):    Item = session.query(CategoryItem).filter_by(id=item_id).one()    return jsonify(Item=Item.serialize)@app.route('/category/JSON')def categoriesJSON():    categories = session.query(Category).all()    return jsonify(Categories=[c.serialize for c in categories])# User Helper Functionsdef createUser(login_session):    newUser = User(name=login_session['username'], email=login_session[        'email'], picture=login_session['picture'])    session.add(newUser)    session.commit()    user = session.query(User).filter_by(email=login_session['email']).one()    return user.iddef getUserInfo(user_id):    try:        user = session.query(User).filter_by(id=user_id).one()        return user    except:        return Nonedef getUserID(email):    try:        user = session.query(User).filter_by(email=email).one()        return user.id    except:        return None# Create Google+ log-in@app.route('/gconnect', methods=['POST'])def gconnect():    # Validate state token    if request.args.get('state') != login_session['state']:        response = make_response(json.dumps('Invalid state parameter.'), 401)        response.headers['Content-Type'] = 'application/json'        return response    # Obtain authorization code    code = request.data    try:        # Upgrade the authorization code into a credentials object        oauth_flow = flow_from_clientsecrets('client_secrets.json', scope='')        oauth_flow.redirect_uri = 'postmessage'        credentials = oauth_flow.step2_exchange(code)    except FlowExchangeError:        response = make_response(            json.dumps('Failed to upgrade the authorization code.'), 401)        response.headers['Content-Type'] = 'application/json'        return response    # Check that the access token is valid.    access_token = credentials.access_token    url = ('https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=%s'           % access_token)    h = httplib2.Http()    result = json.loads(h.request(url, 'GET')[1])        # If there was an error in the access token info, abort.    if result.get('error') is not None:        response = make_response(json.dumps(result.get('error')), 500)        response.headers['Content-Type'] = 'application/json'    # Verify that the access token is used for the intended user.    gplus_id = credentials.id_token['sub']    if result['user_id'] != gplus_id:        response = make_response(            json.dumps("Token's user ID doesn't match given user ID."), 401)        response.headers['Content-Type'] = 'application/json'        return response    # Verify that the access token is valid for this app.    if result['issued_to'] != CLIENT_ID:        response = make_response(            json.dumps("Token's client ID does not match app's."), 401)        print "Token's client ID does not match app's."        response.headers['Content-Type'] = 'application/json'        return response    # Check to see if user is already logged in     stored_credentials = login_session.get('credentials')    stored_gplus_id = login_session.get('gplus_id')    if stored_credentials is not None and gplus_id == stored_gplus_id:        response = make_response(json.dumps('Current user is already connected.'),                                 200)        response.headers['Content-Type'] = 'application/json'        return response    # Store the access token in the session for later use.    login_session['access_token'] = credentials.access_token    login_session['gplus_id'] = gplus_id    # Get user info    userinfo_url = "https://www.googleapis.com/oauth2/v1/userinfo"    params = {'access_token': login_session['access_token'], 'alt': 'json'}    answer = requests.get(userinfo_url, params=params)    data = answer.json()    login_session['username'] = data['name']    login_session['picture'] = data['picture']    login_session['email'] = data['email']    # ADD PROVIDER TO LOGIN SESSION    login_session['provider'] = 'google'    # See if a user exists, if it doesn't make a new one    user_id = getUserID(login_session['email'])    if not user_id:        user_id = createUser(login_session)    login_session['user_id'] = user_id    output = ''    output += '<h1>Welcome, '    output += login_session['username']    output += '!</h1>'    output += '<img src="'    output += login_session['picture']    output += ' " style = "width: 300px; height: 300px;border-radius: 150px;-webkit-border-radius: 150px;-moz-border-radius: 150px;"> '    flash("You are now logged in as %s" % login_session['username'])    print "done!"    return output# DISCONNECT - Revoke a current user's token and reset their login_session@app.route('/gdisconnect')def gdisconnect():    # Only disconnect a connected user.    access_token = login_session.get('access_token')    if access_token is None:        response = make_response(            json.dumps('Current user not connected.'), 401)        response.headers['Content-Type'] = 'application/json'        return response    url = 'https://accounts.google.com/o/oauth2/revoke?token=%s' % access_token    h = httplib2.Http()    result = h.request(url, 'GET')[0]    if result['status'] != '200':        # For whatever reason, the given token was invalid.        response = make_response(            json.dumps('Failed to revoke token for given user.', 400))        response.headers['Content-Type'] = 'application/json'        return response# Create facebook log-in@app.route('/fbconnect', methods=['POST'])def fbconnect():    if request.args.get('state') != login_session['state']:        response = make_response(json.dumps('Invalid state parameter.'), 401)        response.headers['Content-Type'] = 'application/json'        return response    access_token = request.data    # Exchange client token for long-lived server-side token with GET /oauth/access_token?grant_type=fb_exchange_token&    # client_id={app-id}&client_secret={app-secret}&fb_exchange_token={short_lived_token}    app_id = json.loads(open('fb_client_secrets.json', 'r').read())[        'web']['app_id']    app_secret = json.loads(        open('fb_client_secrets.json', 'r').read())['web']['app_secret']    url = 'https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&client_id=%s&client_secret=%s&fb_exchange_token=%s' % (        app_id, app_secret, access_token)    h = httplib2.Http()    result = h.request(url, 'GET')[1]    # Use token to get user info from API    userinfo_url = "https://graph.facebook.com/v2.4/me"    # strip expire tag from long-term token    token = result.split("&")[0]    # Use token to get user info from API    url = 'https://graph.facebook.com/v2.5/me?%s&fields=name,id,email' % token    h = httplib2.Http()    result = h.request(url, 'GET')[1]    # print "url sent for API access:%s"% url    # print "API JSON result: %s" % result    data = json.loads(result)    login_session['provider'] = 'facebook'    login_session['username'] = data["name"]    login_session['email'] = data["email"]    login_session['facebook_id'] = data["id"]    # The token must be stored in the login_session in order to properly logout, let's strip out the information before the equals sign in our token    stored_token = token.split("=")[1]    login_session['access_token'] = stored_token    # Get user picture (FB uses a separate API call to retrieve user's picture)    url = 'https://graph.facebook.com/v2.5/me/picture?%s&redirect=0&height=200&width=200' % token    h = httplib2.Http()    result = h.request(url, 'GET')[1]    data = json.loads(result)    login_session['picture'] = data["data"]["url"]    # see if user exists    user_id = getUserID(login_session['email'])    if not user_id:        user_id = createUser(login_session)    login_session['user_id'] = user_id    output = ''    output += '<h1>Welcome, '    output += login_session['username']    output += '!</h1>'    output += '<img src="'    output += login_session['picture']    output += ' " style = "width: 300px; height: 300px;border-radius: 150px;-webkit-border-radius: 150px;-moz-border-radius: 150px;"> '    flash("Now logged in as %s" % login_session['username'])    return output@app.route('/fbdisconnect')def fbdisconnect():    facebook_id = login_session['facebook_id']    # The access token must be included to successfully logout    access_token = login_session['access_token']    url = 'https://graph.facebook.com/%s/permissions?access_token=%s' % (facebook_id, access_token)    h = httplib2.Http()    result = h.request(url, 'DELETE')[1]    return "you have been logged out"# Check to see which provider should be disconnected from@app.route('/disconnect')def disconnect():    if 'provider' in login_session:        if login_session['provider'] == 'google':            gdisconnect()            del login_session['gplus_id']            del login_session['access_token']        if login_session['provider'] == 'facebook':            fbdisconnect()            del login_session['facebook_id']        del login_session['username']        del login_session['email']        del login_session['picture']        del login_session['user_id']        del login_session['provider']        flash("You have successfully been logged out.")        return  redirect(url_for('showCategories'))    else:        flash("You were not logged in to begin with")        redirect(url_for('showCategories'))# Create anti-forgery state token@app.route('/login')def showLogin():    state = ''.join(random.choice(string.ascii_uppercase + string.digits)                    for x in xrange(32))    login_session['state'] = state    return render_template('login.html', STATE=state)# Show all categories@app.route('/')@app.route('/category/')def showCategories():    categories = session.query(Category).order_by(asc(Category.name))    items = session.query(CategoryItem).order_by(desc(CategoryItem.lastTime)).limit(10)    if 'username' not in login_session:        return render_template('publiccategories.html', categories=categories, items=items)    else:        user_id=login_session['user_id']         return render_template('categories.html', categories=categories, items=items, user_id=user_id)# Show a category item@app.route('/category/<int:category_id>/')@app.route('/category/<int:category_id>/categoryItem/')def showItems(category_id):    category = session.query(Category).filter_by(id=category_id).one()    creator = getUserInfo(category.user_id)    items = session.query(CategoryItem).filter_by(        category_id=category_id).all()    if 'username' not in login_session or creator == None or creator.id != login_session['user_id']:        return render_template('publiccategoryitem.html', items=items, category=category, category_id=category_id, creator=creator)    else:        return render_template('categoryitem.html', items=items, category=category, category_id=category_id, creator=creator)# Create a new category@app.route('/category/new/', methods=['GET', 'POST'])def newCategory():    if 'username' not in login_session:        return redirect('/login')    if request.method == 'POST':        newCategory = Category(name=request.form['name'], user_id=login_session['user_id'])        session.add(newCategory)        session.commit()        flash('New Category %s Successfully Created' % (newCategory.name))        return redirect(url_for('showCategories'))    else:        return render_template('newcategory.html')# Delete a new category@app.route('/category/<int:category_id>/delete/', methods=['GET', 'POST'])def deleteCategory(category_id):    if 'username' not in login_session:        return redirect('/login')    categoryToDelete = session.query(        Category).filter_by(id=category_id).one()    if login_session['user_id'] != categoryToDelete.user_id:        return "<script>function myFunction() {alert('You are not authorized to delete this category. Please create your own category in order to delete.');}</script><body onload='myFunction()''>"    if request.method == 'POST':        itemsToDelete = session.query(CategoryItem).filter_by(                category_id=category_id).all()        for item in itemsToDelete:            session.delete(item)        session.delete(categoryToDelete)        session.commit()        flash('Category %s Successfully Deleted' % (categoryToDelete.name))        return  redirect(url_for('showCategories'))    else:        return render_template('deletecategory.html', category=categoryToDelete)# Edit a category@app.route('/category/<int:category_id>/edit/', methods=['GET', 'POST'])def editCategory(category_id):    if 'username' not in login_session:        return redirect('/login')    editedCategory = session.query(        Category).filter_by(id=category_id).one()    if login_session['user_id'] != editedCategory.user_id:        return "<script>function myFunction() {alert('You are not authorized to edit this category. Please create your own category in order to edit.');}</script><body onload='myFunction()''>"    if request.method == 'POST':        if request.form['name']:            editedCategory.name = request.form['name']            flash('Category %s Successfully Edited' % (editedCategory.name))            return redirect(url_for('showCategories'))    else:        return render_template('editcategory.html', category=editedCategory)# Create a new category item@app.route('/category/<int:category_id>/categoryItem/new/', methods=['GET', 'POST'])def newCategoryItem(category_id):    if 'username' not in login_session:        return redirect('/login')    category = session.query(Category).filter_by(id=category_id).one()    if login_session['user_id'] != category.user_id:        return "<script>function myFunction() {alert('You are not authorized to add a new item to this category. Please create your own category in order to add a new item.');}</script><body onload='myFunction()''>"    if request.method == 'POST':        newCategoryItem = CategoryItem(name=request.form['item-name'], description=request.form[            'item-description'], category_id=category_id, user_id=login_session['user_id'])        session.add(newCategoryItem)        session.commit()        flash('New Item For Category %s Successfully Created' % (category.name))        return redirect(url_for('showItems', category_id=category_id))    else:        return render_template('newcategoryitem.html', category_id=category_id, category=category)# Edit a category item@app.route('/category/<int:category_id>/categoryItem/<int:item_id>/edit/', methods=['GET', 'POST'])def editCategoryItem(category_id, item_id):    if 'username' not in login_session:        return redirect('/login')    editedItem = session.query(CategoryItem).filter_by(id=item_id).one()    category = session.query(Category).filter_by(id=category_id).one()    if login_session['user_id'] != editedItem.user_id:        return "<script>function myFunction() {alert('You are not authorized to edit this item. Please create your own item in order to edit.');}</script><body onload='myFunction()''>"    if request.method == 'POST':        if request.form['name']:            editedItem.name = request.form['name']        if request.form['description']:            editedItem.description = request.form['description']        session.add(editedItem)        session.commit()        flash('%s Successfully Edited' % (editedItem.name))        return redirect(url_for('showItems', category_id=category_id))    else:        return render_template('editcategoryItem.html', category=category, category_id=category_id, item_id=item_id,                               item=editedItem)# Delete a category item@app.route('/category/<int:category_id>/categoryItem/<int:item_id>/delete', methods=['GET', 'POST'])def deleteCategoryItem(category_id, item_id):    if 'username' not in login_session:        return redirect('/login')    category = session.query(Category).filter_by(id=category_id).one()    itemToDelete = session.query(CategoryItem).filter_by(id=item_id).one()    if login_session['user_id'] != itemToDelete.user_id:        return "<script>function myFunction() {alert('You are not authorized to delete this item. Please create your own item in order to delete.');}</script><body onload='myFunction()''>"    if request.method == 'POST':        session.delete(itemToDelete)        session.commit()        flash('%s Successfully Deleted' % (itemToDelete.name))        return redirect(url_for('showItems', category_id=category_id))    else:        return render_template('deletecategoryitem.html', item=itemToDelete, category_id=category.id)if __name__ == '__main__':    app.secret_key = 'super_secret_key'    app.debug = True    app.run(host='0.0.0.0', port=5000)