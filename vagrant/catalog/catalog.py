from flask import Flask, render_template, request, redirect, url_forfrom sqlalchemy import create_engine, asc,descfrom sqlalchemy.orm import sessionmakerfrom database_setup import Category, CategoryItem, Baseimport random, stringapp = Flask(__name__,  static_url_path='/static')# Connect to Database and create database sessionengine = create_engine('sqlite:///catalog.db')Base.metadata.bind = engineDBSession = sessionmaker(bind=engine)session = DBSession()# Show all restaurants@app.route('/')@app.route('/category/')def showCategories():    categories = session.query(Category).order_by(asc(Category.name))    items = session.query(CategoryItem).order_by(desc(CategoryItem.lastTime)).limit(10)    return render_template('categories.html', categories=categories, items=items)#Show a category item@app.route('/category/<int:category_id>/')@app.route('/category/<int:category_id>/categoryItem/')def showItems(category_id):    category = session.query(Category).filter_by(id=category_id).one()    items = session.query(CategoryItem).filter_by(        category_id=category_id).all()    return render_template('categoryItem.html', items=items, category=category)# # Create a new restaurant# @app.route('/restaurant/new/', methods=['GET', 'POST'])# def newRestaurant():#     if 'username' not in login_session:#         return redirect('/login')#     if request.method == 'POST':#         newRestaurant = Restaurant(name=request.form['name'], user_id=login_session['user_id'])#         session.add(newRestaurant)#         flash('New Restaurant %s Successfully Created' % newRestaurant.name)#         session.commit()#         return redirect(url_for('showRestaurants'))#     else:#         return render_template('newRestaurant.html')### # Edit a restaurant# @app.route('/restaurant/<int:restaurant_id>/edit/', methods=['GET', 'POST'])# def editRestaurant(restaurant_id):#     if 'username' not in login_session:#         return redirect('/login')#     editedRestaurant = session.query(#         Restaurant).filter_by(id=restaurant_id).one()#     if request.method == 'POST':#         if request.form['name']:#             editedRestaurant.name = request.form['name']#             flash('Restaurant Successfully Edited %s' % editedRestaurant.name)#             return redirect(url_for('showRestaurants'))#     else:#         return render_template('editRestaurant.html', restaurant=editedRestaurant)### # Delete a restaurant# @app.route('/restaurant/<int:restaurant_id>/delete/', methods=['GET', 'POST'])# def deleteRestaurant(restaurant_id):#     if 'username' not in login_session:#         return redirect('/login')#     restaurantToDelete = session.query(#         Restaurant).filter_by(id=restaurant_id).one()#     if request.method == 'POST':#         session.delete(restaurantToDelete)#         flash('%s Successfully Deleted' % restaurantToDelete.name)#         session.commit()#         return redirect(url_for('showRestaurants', restaurant_id=restaurant_id))#     else:#         return render_template('deleteRestaurant.html', restaurant=restaurantToDelete)##### # Create a new menu item# @app.route('/restaurant/<int:restaurant_id>/menu/new/', methods=['GET', 'POST'])# def newMenuItem(restaurant_id):#     if 'username' not in login_session:#         return redirect('/login')#     restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()#     if request.method == 'POST':#         newItem = MenuItem(name=request.form['name'], description=request.form[#             'description'], price=request.form['price'], course=request.form['course'], restaurant_id=restaurant_id,#                            user_id=login_session['user_id'])#         session.add(newItem)#         session.commit()#         flash('New Menu %s Item Successfully Created' % (newItem.name))#         return redirect(url_for('showMenu', restaurant_id=restaurant_id))#     else:#         return render_template('newmenuitem.html', restaurant_id=restaurant_id)### # Edit a menu item# @app.route('/restaurant/<int:restaurant_id>/menu/<int:menu_id>/edit', methods=['GET', 'POST'])# def editMenuItem(restaurant_id, menu_id):#     if 'username' not in login_session:#         return redirect('/login')#     editedItem = session.query(MenuItem).filter_by(id=menu_id).one()#     restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()#     if request.method == 'POST':#         if request.form['name']:#             editedItem.name = request.form['name']#         if request.form['description']:#             editedItem.description = request.form['description']#         if request.form['price']:#             editedItem.price = request.form['price']#         if request.form['course']:#             editedItem.course = request.form['course']#         session.add(editedItem)#         session.commit()#         flash('Menu Item Successfully Edited')#         return redirect(url_for('showMenu', restaurant_id=restaurant_id))#     else:#         return render_template('editmenuitem.html', restaurant_id=restaurant_id, menu_id=menu_id, item=editedItem)### # Delete a menu item# @app.route('/restaurant/<int:restaurant_id>/menu/<int:menu_id>/delete', methods=['GET', 'POST'])# def deleteMenuItem(restaurant_id, menu_id):#     if 'username' not in login_session:#         return redirect('/login')#     restaurant = session.query(Restaurant).filter_by(id=restaurant_id).one()#     itemToDelete = session.query(MenuItem).filter_by(id=menu_id).one()#     if request.method == 'POST':#         session.delete(itemToDelete)#         session.commit()#         flash('Menu Item Successfully Deleted')#         return redirect(url_for('showMenu', restaurant_id=restaurant_id))#     else:#         return render_template('deleteMenuItem.html', item=itemToDelete)if __name__ == '__main__':    app.secret_key = 'super_secret_key'    app.debug = True    app.run(host='0.0.0.0', port=5000)